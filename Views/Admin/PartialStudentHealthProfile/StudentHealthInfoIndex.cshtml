@Html.Partial("PartialStudentHealthProfile/cardtable")
@Html.Partial("PartialStudentHealthProfile/StudentHealthInformationTable")
@Html.Partial("PartialStudentHealthProfile/updateStudentHealth")


@* gamit kaayu ni siya para maka pa display og value sa select option *@
<script src="~/lib/jquery/dist/jquery.js"></script>


<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    var selectedStudentHI;
    var selectedStudentHIId;
    var StudentHIList = {};
    var arr = {};
    var disdate = {};
    var dateClick;
    var dateComp = {};


    $(document).ready(function () {

        populateIndex();
        getUnits();

        function getUnits() {
            $.ajax("../api/adminapi/getNR")
                .done(function (result) {


                    var a = [];
                    a = result.filter(function (item) {
                        return item.test === "WBC";
                    });

                    var b = [];
                    b = result.filter(function (item) {
                        return item.test === "Neutrophils";
                    });

                    var c = [];
                    c = result.filter(function (item) {
                        return item.test === "Lymphocyte";
                    });

                    var d = [];
                    d = result.filter(function (item) {
                        return item.test === "Monocyte";
                    });

                    var e = [];
                    e = result.filter(function (item) {
                        return item.test === "Eosinophil";
                    });

                    var f = [];
                    f = result.filter(function (item) {
                        return item.test === "Basophil";
                    });

                    var g = [];
                    g = result.filter(function (item) {
                        return item.test === "Hemoglobin";
                    });

                    var h = [];
                    h = result.filter(function (item) {
                        return item.test === "Hematocrit";
                    });

                    var ii = [];
                    ii = result.filter(function (item) {
                        return item.test === "RBC";
                    });

                    console.log(ii);

                    var j = [];
                    j = result.filter(function (item) {
                        return item.test === "MCV";
                    });


                    var k = [];
                    k = result.filter(function (item) {
                        return item.test === "MCH";
                    });


                    var l = [];
                    l = result.filter(function (item) {
                        return item.test === "MCHC";
                    });

                    var m = [];
                    m = result.filter(function (item) {
                        return item.test === "RCDW";
                    });


                    var n = [];
                    n = result.filter(function (item) {
                        return item.test === "Platelet Count";
                    });

                    var o = [];
                    o = result.filter(function (item) {
                        return item.test === "MPV";
                    });



                    var template = document.querySelector("template#unitsOptionTemplate");


                    var parent = document.querySelectorAll("#wbc");
                    for (i = 0; i < parent.length; i++) {
                        a.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //  cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#neutrophils");
                    for (i = 0; i < parent.length; i++) {
                        b.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#lymphocyte");
                    for (i = 0; i < parent.length; i++) {
                        c.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //  cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }






                    var parent = document.querySelectorAll("#monocyte");
                    for (i = 0; i < parent.length; i++) {
                        d.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //     cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#eosinophil");
                    for (i = 0; i < parent.length; i++) {
                        e.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //     cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }




                    var parent = document.querySelectorAll("#basophil");
                    for (i = 0; i < parent.length; i++) {
                        f.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#hemoglobin");
                    for (i = 0; i < parent.length; i++) {
                        g.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#hematocrit");
                    for (i = 0; i < parent.length; i++) {
                        h.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#rbc");
                    for (i = 0; i < parent.length; i++) {
                        ii.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#mcv");
                    for (i = 0; i < parent.length; i++) {
                        j.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //     cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#mch");
                    for (i = 0; i < parent.length; i++) {
                        k.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }




                    var parent = document.querySelectorAll("#mchc");
                    for (i = 0; i < parent.length; i++) {
                        l.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#rcdw");
                    for (i = 0; i < parent.length; i++) {
                        m.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#pl");
                    for (i = 0; i < parent.length; i++) {
                        n.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#mpv");
                    for (i = 0; i < parent.length; i++) {
                        o.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }


                });

        }



        function populateIndex() {

            $.ajax("../api/adminapi/getStudentHI")
                .done(function (data) {

                    dateComp = data;

                    document.querySelector(".parent").innerHTML = "";


                    // Remove duplicates based on 'datet'
                    let uniqueData = [];
                    let seenDates = new Set();

                    data.forEach(entry => {
                        if (!seenDates.has(entry.datet)) {
                            seenDates.add(entry.datet);
                            uniqueData.push(entry);
                        }
                    });

                    // Display unique data
                    //   console.log(uniqueData);

                    disdate = uniqueData;



                    uniqueData.forEach(function (item) {

                        var template = document.querySelector("template#card-container");
                        var parent = document.querySelector(".parent");
                        var cloned = template.content.cloneNode(true);



                        cloned.querySelector(".card .card-title").innerHTML = item.datet;


                        cloned.querySelector(".datecard").setAttribute("data-datet", item.datet);

                        parent.prepend(cloned);
                    });
                });


        }



        $('#AsearchText').on("input", function () {
            var searchedItem = $(this).val();

            //console.log(searchedItem);

            var search = disdate.filter(element => element.datet.toLowerCase().includes(searchedItem.toLowerCase()) || element.datet.toUpperCase().includes(searchedItem.toUpperCase()));
            //console.log(sear);

            document.querySelector(".parent").innerHTML = "";

            search.forEach(function (item) {
                var template = document.querySelector("template#card-container");
                var parent = document.querySelector(".parent");
                var cloned = template.content.cloneNode(true);

                cloned.querySelector(".card .card-title").innerHTML = item.datet;


                cloned.querySelector(".datecard").setAttribute("data-datet", item.datet);


                parent.prepend(cloned);
            });


        });














        $(".parent").delegate(".datecard", "click", function (e) {

            // console.log("na click najyud");
            var i = e.target.closest("div").getAttribute("data-datet");

            console.log("salamat sa pag click", i);

            if (i != null) {
                dateClick = i;
                //    console.log(dateClick + "mao ni siya");


                //filtere data that have th same value on selected date

                var filteredData = dateComp.filter(function (entry) {
                    return entry.datet === dateClick;
                });

                //   console.log(filteredData);

                //para dili magka duplicate ang mga value
                table.clear().draw();


                populateTable(filteredData);

            }

        });



        // DataTable initialization
        var table = $('#StudentHealthInfoData').DataTable({
            columns: [
                { data: 'shiId' },
                { data: 'fullname' },
                { data: 'birthdate' },
                { data: 'gender' },
                { data: 'age' },
                { data: 'hospitalnumber' },
                { data: 'cbcphysician' },
                { data: 'departmentName' },
                { data: 'courseStrandYearName' },

                {
                    data: 'shiId',
                    render: function (data, type, row) {
                        return btnAddStudentHealthData(data);
                    }
                },
                // Add other columns based on your data fields
            ]
        });


        function btnAddStudentHealthData(shiId) {
            return "<center><a style='color : #ffffff;' class='btn btn-success StudentHIUpdate' data-shiId=" + shiId + "><i title='Update Student Information' class='fa-solid fa-pen-to-square'></i> Update</a> <br><br> <a style='color : #ffffff;' class='btn btn-danger StudentHIDelete' data-shiId=" + shiId + "><i title='Delete Student Information' class='fa-solid fa-trash' ></i>  Delete</a>  </center>"
        }



        // Function to populate the table with data
        function populateTable(data) {
            $.each(data, function (index, item) {
                table.row.add(item).draw(false);
            });
        }


        $("tbody").delegate(".StudentHIUpdate", "click", function (e) {

            var i = e.target.closest("a").getAttribute("data-shiId");
            console.log("pilay value nimo giatay", i);
            if (i != null) {

                $("#modalStudentHealthUpdate").modal("toggle");

                selectedStudentHIId = i;

                console.log("disdate pakita kurimaw", disdate);

                selectedStudentHI = dateComp.find(element => element.shiId == i);

                //var selectIdToSet = $("#Course");
                console.log('before ang selectedStuudentHI', selectedStudentHI);



                oFormObject = document.forms["StudentHealthUpdateForm"];

                initForm(oFormObject, selectedStudentHI);



            }
        });



        function initForm(form, data) {

            Object.getOwnPropertyNames(data).forEach(function (item) {
                var currentElem = form.elements[item.charAt(0).toUpperCase() + item.slice(1)];

                if (currentElem == null) { return; }
                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "wbc") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.wbcunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "neutrophils") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.neutrophilsunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }
                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "lymphocyte") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.lymphocyteunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "monocyte") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.monocyteunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "eosinophil") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.eosinophilunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }


                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "basophil") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.basophilunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "hemoglobin") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.hemoglobinunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }


                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "hematocrit") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.hematocritunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }



                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "rbc") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.rbcunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "mcv") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.mcvunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }


                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "mch") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.mchunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }


                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "mchc") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.mchcunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }



                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "rcdw") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.rcdwunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }



                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "pl") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.plateletcountunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "mpv") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.mpvunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }




            });
        }


        $("#updateStudentHealth").click(function () {
            alertSaveChanges();
        });

        function alertSaveChanges() {
            Swal.fire({
                title: 'Do you want to save the changes?',
                confirmButtonText: 'Save',
                showCancelButton: true,
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    updateStudentHolder();
                }
            })
        }

        function updateStudentHolder() {

            var arrData = {};
            var formelements = $("#StudentHealthUpdateForm .form-group");

            //getting the data from the form
            var formInputs = $("#StudentHealthUpdateForm").serializeArray();
            formInputs.forEach(function (item) {
                arrData[item.name] = item.value;
            });




            var wbc = $('#wbc option:selected').text();
            var neutrophils = $('#neutrophils option:selected').text();
            var lymphocyte = $('#lymphocyte option:selected').text();
            var monocyte = $('#monocyte option:selected').text();
            var eosinophil = $('#eosinophil option:selected').text();
            var basophil = $('#basophil option:selected').text();
            var hemoglobin = $('#hemoglobin option:selected').text();
            var hematocrit = $('#hematocrit option:selected').text();
            var rbc = $('#rbc option:selected').text();
            var mcv = $('#mcv option:selected').text();
            var mch = $('#mch option:selected').text();
            var mchc = $('#mchc option:selected').text();
            var rcdw = $('#rcdw option:selected').text();
            var plateletcount = $('#pl option:selected').text();
            var mpv = $('#mpv option:selected').text();

            arrData.ShiId = selectedStudentHIId;
            arrData.Wbcunits = wbc;
            arrData.Neutrophilsunits = neutrophils;
            arrData.Lymphocyteunits = lymphocyte;
            arrData.Monocyteunits = monocyte;
            arrData.Eosinophilunits = eosinophil;
            arrData.Basophilunits = basophil;
            arrData.Hemoglobinunits = hemoglobin;
            arrData.Hematocritunits = hematocrit;
            arrData.Rbcunits = rbc;
            arrData.Mcvunits = mcv;
            arrData.Mchunits = mch;
            arrData.Mchcunits = mchc;
            arrData.Rcdwunits = rcdw;
            arrData.Plateletcountunits = plateletcount;
            arrData.Mpvunits = mpv;


            arrData.Datet = selectedStudentHI.datet;
            arrData.Hospitalnumber = selectedStudentHI.hospitalnumber;
            arrData.Cbcphysician = selectedStudentHI.cbcphysician;
            arrData.Cbcdatetimerequested = selectedStudentHI.cbcdatetimerequested;
            arrData.Cbcdrawdatetime = selectedStudentHI.cbcdrawdatetime;
            arrData.spiId = selectedStudentHI.spiId;


            console.log('before', arrData);

            if (formInputs.length === formelements.length && formInputs[0].value !== '') {

                proceedUpdate(arrData);

            } else {
                alertError();
            }
        }


        function proceedUpdate(arrData) {

            //AJAX UPDATE DEPARTMENT
            $.ajax
                ({
                    url: "../api/adminapi/UpdateStudentHealth",
                    type: "POST",
                    data:
                    {
                        upsth: arrData,
                    },
                })
                .done(function () {
                    $("#StudentHealthUpdateForm")[0].reset();
                    $("#modalStudentHealthUpdate").modal("toggle");
                    // displayStudentData();
                    populateIndex();
                    displaySavedProgress();




                });
        }































        function alertDeleteInfo() {
            Swal.fire(
                'Deleted!',
                'Your file has been deleted.',
                'success'
            )
        }


        function vol1() {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Inputted name is already in the data',
            })
        }
        function alertError() {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Input the necessary elements!',
            })
        }

        function displaySavedProgress() {
            Swal.fire({
                icon: 'success',
                title: 'Your work has been saved',
                showConfirmButton: false,
                timer: 1500
            })

        }















    });// end of this do not touch it


</script>